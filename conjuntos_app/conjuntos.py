#!/usr/bin/env python3
"""
Aplicaci√≥n interactiva de l√≠nea de comandos para aprender conjuntos de objetos en espa√±ol.
El usuario debe adivinar el nombre del conjunto al que pertenece cada grupo de objetos.
"""

import random  # Para selecci√≥n aleatoria controlada
import sys     # Para manejar la salida del programa si es necesario
import os      # Para limpiar la pantalla del terminal y manejar archivos
import json    # Para cargar los datos desde conjuntos.txt
# sin dependencias externas

# Versi√≥n de la aplicaci√≥n
__version__ = "0.1.0"

# Diccionario de objetos y sus conjuntos en espa√±ol
# Se carga desde conjuntos.txt
CONJUNTOS = {}

def cargar_conjuntos():
    """Carga los pares objeto:conjunto desde conjuntos.txt"""
    global CONJUNTOS
    try:
        with open('conjuntos.txt', 'r', encoding='utf-8') as f:
            CONJUNTOS = json.load(f)
        # Convertir a formato compatible con animal_sounds.py (lista de un elemento)
        for objeto, conjunto in CONJUNTOS.items():
            CONJUNTOS[objeto] = [conjunto]
    except FileNotFoundError:
        print("‚ùå Error: No se encontr√≥ el archivo conjuntos.txt")
        sys.exit(1)
    except json.JSONDecodeError:
        print("‚ùå Error: El archivo conjuntos.txt no tiene formato JSON v√°lido")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Error al cargar conjuntos.txt: {e}")
        sys.exit(1)

REVIEW_EVERY = 4  # cada cu√°ntas preguntas lanzar una de refuerzo si hay


def seleccionar_siguiente_por_etiquetas(labels, review_queue, num_preguntas):
    # ¬øToca refuerzo?
    if review_queue and num_preguntas > 0 and (num_preguntas % REVIEW_EVERY == 0):
        return review_queue[0], True

    # Elegir de 'n' si hay
    pool_n = [a for a, tag in labels.items() if tag == 'n']
    if pool_n:
        return random.choice(pool_n), False

    # Si todas est√°n en 'p', reiniciar a 'n'
    if labels and all(tag == 'p' for tag in labels.values()):
        for a in labels:
            labels[a] = 'n'
        pool_n = list(labels.keys())
        return random.choice(pool_n), False

    # Si hay 'pn' pero no toca refuerzo, elegir de 'p' para espaciar
    pool_p = [a for a, tag in labels.items() if tag == 'p']
    if pool_p:
        return random.choice(pool_p), False

    # Si no hay 'p', usar refuerzo si existe
    if review_queue:
        return review_queue[0], True

    # Fallback
    return random.choice(list(labels.keys() or CONJUNTOS.keys())), False


def main():
    """
    Funci√≥n principal que ejecuta el bucle del juego.
    """
    # Mostrar la versi√≥n y salir si se solicita antes de cualquier salida/limpieza
    if any(arg in ("--version", "-V") for arg in sys.argv[1:]):
        print(__version__)
        return

    # Cargar los conjuntos desde el archivo
    cargar_conjuntos()

    if not CONJUNTOS:
        print("‚ùå Error: No se encontraron conjuntos v√°lidos en el archivo")
        sys.exit(1)

    # Estado de sesi√≥n (etiquetas + refuerzo)
    intentos_totales = 0
    respuestas_correctas = 0
    num_preguntas = 0
    labels = {objeto: 'n' for objeto in CONJUNTOS.keys()}
    asked_set = set()  # objetos preguntados al menos una vez en la sesi√≥n
    review_queue = []  # cola de objetos con etiqueta 'pn'

    # Configurar codificaci√≥n robusta para I/O de consola
    try:
        sys.stdin.reconfigure(encoding='utf-8', errors='replace')
        sys.stdout.reconfigure(encoding='utf-8', errors='replace')
    except Exception:
        pass

    # Limpiar la pantalla del terminal antes de mostrar el mensaje de bienvenida
    os.system('clear')

    print("¬°Bienvenido a la aplicaci√≥n de conjuntos de objetos!")
    print("Escribe 'quit' o 'q' en cualquier momento para salir.\n")

    # Bucle principal del juego
    try:
        while True:
            # Seleccionar siguiente por etiquetas + refuerzo
            objeto, es_refuerzo = seleccionar_siguiente_por_etiquetas(labels, review_queue, num_preguntas)
            conjuntos_validos = CONJUNTOS[objeto]

            # Hacer la pregunta al usuario (sin prefijo para preguntas normales)
            prefijo = "üîÑ Repaso - " if es_refuerzo else ""
            try:
                respuesta_usuario = input(f"{prefijo}¬øCu√°l es el conjunto formado por {objeto}? ").strip()
            except EOFError:
                print("\n\n‚ùå Error: No se pudo leer la entrada del usuario.")
                print("Esto puede suceder cuando se ejecuta el script sin una terminal interactiva.")
                print("Intenta ejecutar: python3 conjuntos.py")
                break
            except UnicodeError:
                # Fallback de lectura robusta si la terminal no es UTF-8
                try:
                    raw = sys.stdin.buffer.readline()
                    respuesta_usuario = raw.decode('utf-8', errors='replace').strip()
                except Exception:
                    print("\n\n‚ùå Error de codificaci√≥n en la entrada. Intenta sin acentos o cambia la codificaci√≥n de la terminal.")
                    continue

            # Verificar si el usuario quiere salir
            if respuesta_usuario.lower() in ['quit', 'q']:
                print("\nprograma terminado por el usuario")
                break

            # Incrementar contadores
            intentos_totales += 1
            num_preguntas += 1
            asked_set.add(objeto)

            # Verificar la respuesta (ignorando may√∫sculas/min√∫sculas y espacios)
            # Comprobar si la respuesta est√° en la lista de conjuntos v√°lidos
            respuesta_correcta = any(respuesta_usuario.lower() == conjunto.lower() for conjunto in conjuntos_validos)

            # Actualizar etiquetas y refuerzo
            if respuesta_correcta:
                print("¬°Correcto! ‚úÖ")
                respuestas_correctas += 1
                labels[objeto] = 'p'
                if es_refuerzo and review_queue and review_queue[0] == objeto:
                    review_queue.pop(0)
            else:
                # Mostrar todas las opciones v√°lidas
                opciones = " o ".join(f"'{conjunto}'" for conjunto in conjuntos_validos)
                print(f"Incorrecto ‚Äì las respuestas correctas son {opciones}")
                labels[objeto] = 'pn'
                if objeto not in review_queue:
                    review_queue.append(objeto)
                    print(f"üìù {objeto} agregado a refuerzo.")

            print()  # L√≠nea en blanco para mejor legibilidad

    except KeyboardInterrupt:
        print("\nprograma terminado por el usuario")
    except Exception as e:
        print(f"\n\n‚ùå Error inesperado: {e}")
        print("La aplicaci√≥n se cerrar√° por seguridad.")
    finally:
        # Mostrar estad√≠sticas finales si se jug√≥ al menos una ronda
        if intentos_totales > 0:
            print(f"\nüìä Estad√≠sticas de la sesi√≥n:")
            preguntados = len(asked_set)
            total = len(CONJUNTOS)
            print(f"‚Ä¢ Objetos preguntados {preguntados} de {total}")
            print(f"‚Ä¢ En refuerzo: {len(review_queue)}")
            print(f"Puntuaci√≥n final: {respuestas_correctas}/{intentos_totales} correctas")

    # Salir del programa
    sys.exit(0)

# Ejecutar la funci√≥n principal si el script se ejecuta directamente
if __name__ == "__main__":
    main()
